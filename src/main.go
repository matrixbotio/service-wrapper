package main

import (
	"fmt"
	"os/exec"
	"time"

	"_/src/controller"
	"_/src/servicedef"

	"github.com/chebyrash/promise"
)

var state string
var startTime = ""

func awaitRestartCommand(text string, files ...controller.File) {
	promise.New(func(resolve func(v promise.Any), reject func(error)) {
		controller.Send(text, []controller.Button{
			{
				Text:         "üîÑ –†–µ—Å—Ç–∞—Ä—Ç",
				RMMsgsOnClick: true,
				OnClick: func() {
					resolve(nil)
				},
			},
		}, files...)
	}).Await()
}

func run() {
	cmd := exec.Command(servicedef.Command, servicedef.Args...)
	stdout, stdoutPipeErr := cmd.StdoutPipe()
	if stdoutPipeErr != nil {
		state = fmt.Sprintf("–ù–µ —É–¥–∞—ë—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å stdout: %v", stdoutPipeErr)
		awaitRestartCommand(state)
		return
	}
	stderr, stderrPipeErr := cmd.StderrPipe()
	if stderrPipeErr != nil {
		state = fmt.Sprintf("–ù–µ —É–¥–∞—ë—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å stderr: %v", stderrPipeErr)
		awaitRestartCommand(state)
		return
	}
	err := cmd.Start()
	if err != nil {
		state = fmt.Sprintf("–ù–µ —É–¥–∞—ë—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–∏—Å–∞: %v", err)
		awaitRestartCommand(state)
		return
	}
	state = "–ó–∞–ø—É—â–µ–Ω"
	startTime = time.Now().Format(timeFormat)
	files := readStdoutStderr(stdout, stderr)
	waitErr := cmd.Wait()
	if waitErr != nil {
		startTime = ""
		state = fmt.Sprintf("–ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–∞—à–Ω—É–ª—Å—è: %v", waitErr)
		awaitRestartCommand(state, files...)
		return
	}
	startTime = ""
	state = "–ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–∏—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å–ª—É—á–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—Ç–µ –≤—ã–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞"
	awaitRestartCommand(state, files...)
}

func main() {
	for{
		state = "–ó–∞–ø—É—Å–∫..."
		controller.OnStatusCheck(func() (string, string, []controller.Button, []controller.File) {
			return state, startTime, []controller.Button{}, []controller.File{}
		})
		run()
	}
}
